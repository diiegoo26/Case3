name: Build frontend, run tests and more

on:
  # Trigger the workflow manually or on pull requests to the 'uat' branch
  workflow_dispatch:
  push:
    branches:
    - front-end

env:
  # Environment variables for the workflow
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY: master-ugr.calculator.front-end/calculator.frontend
  TEST_PATH: master-ugr.calculator.front-end/tests/calculator.frontend.tests
  BACKEND_URL: https://pablomuar-calculator-backend-uat.azurewebsites.net
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      # Checkout the repository      
    - name: Listing current dir
      run: ls -la
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      # Setup the .NET SDK version specified in the environment variables

    - name: Restore
      run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
      # Restore the dependencies for the .NET project

    - name: Build
      run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore
      # Build the .NET project in Release configuration without restoring dependencies
  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        # Checkout the repository (each job runs in a fresh VM)

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
        # Setup the .NET SDK version specified in the environment variables

      - name: Install Playwright Browsers
        run: |
          # Install Playwright and required browsers
          npm install -g playwright
          npx playwright install

      - name: Start frontend server
        run: |
          # Start the frontend server in the background
          cd ${{ env.WORKING_DIRECTORY }}
          nohup dotnet run --configuration ${{ env.CONFIGURATION }} &
        env:
          CALCULATOR_BACKEND_URL: ${{ env.BACKEND_URL }}

      - name: Wait for server to start
        run: |
          # Wait for the server to be available at http://localhost:5140
          for i in {1..30}; do
            curl -s http://localhost:5140 && break || echo "Waiting for server..."; sleep 5;
          done
        # This ensures that the test only starts once the fronte is ready to respond

      - name: Run tests
        run: dotnet test ${{ env.TEST_PATH }}
